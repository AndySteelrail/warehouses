using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Warehouses.client.Models;
using Warehouses.client.Models.DTO;
using Warehouses.client.Models.DTO.Tree;
using Warehouses.client.Services;

namespace Warehouses.client.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
/// </summary>
public class TreeDataService
{
    private readonly IWarehouseService _warehouseService;

    public TreeDataService(IWarehouseService warehouseService)
    {
        _warehouseService = warehouseService;
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–æ–≤ —Å –ø–ª–æ—â–∞–¥–∫–∞–º–∏ –∏ –ø–∏–∫–µ—Ç–∞–º–∏
    /// </summary>
    public async Task<ObservableCollection<TreeNode>> LoadWarehousesTreeAsync(
        DateTime selectedDate,
        CargoType? selectedCargoType,
        Func<TreeNode, Task<bool>> editCallback,
        Func<TreeNode, Task<bool>> deleteCallback,
        Func<TreeNode, Task<bool>> createPicketCallback,
        Func<TreeNode, Task<bool>> createPlatformCallback,
        Func<int, Task<bool>> addCargoCallback)
    {
        var warehousesTree = new ObservableCollection<TreeNode>();

        try
        {
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å–∫–ª–∞–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–∑—É
            int? cargoTypeId = null;
            if (selectedCargoType != null && selectedCargoType.Id > 0)
            {
                cargoTypeId = selectedCargoType.Id;
            }
            
            var tree = await _warehouseService.GetWarehousesTreeAsync(selectedDate, cargoTypeId);

            // 2. –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è —Å–∫–ª–∞–¥–æ–≤ —Å –ø–ª–æ—â–∞–¥–∫–∞–º–∏
            foreach (var warehouseDto in tree.Warehouses)
            {
                var warehouse = new Warehouse { Id = warehouseDto.Id, Name = warehouseDto.Name };
                var warehouseNode = CreateWarehouseNode(warehouse, editCallback, deleteCallback, createPicketCallback, createPlatformCallback);

                foreach (var platformDto in warehouseDto.Platforms)
                {
                    var platformNode = CreatePlatformNodeFromTree(platformDto, warehouseDto.Id, editCallback, deleteCallback, addCargoCallback);
                    warehouseNode.Children.Add(platformNode);
                }

                warehousesTree.Add(warehouseNode);
            }

            // 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –∫–æ–Ω–µ—Ü –¥–µ—Ä–µ–≤–∞
            var createWarehouseNode = new TreeNode
            {
                Id = -1,
                NodeType = TreeNodeType.CreateWarehouse,
                DisplayName = "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥"
            };
            warehousesTree.Add(createWarehouseNode);
        }
        catch (Exception ex)
        {
            // —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ—Ç–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {ex.Message}");
            return new ObservableCollection<TreeNode>();
        }

        return warehousesTree;
    }

    private static TreeNode CreateWarehouseNode(
        Warehouse warehouse,
        Func<TreeNode, Task<bool>> editCallback,
        Func<TreeNode, Task<bool>> deleteCallback,
        Func<TreeNode, Task<bool>> createPicketCallback,
        Func<TreeNode, Task<bool>> createPlatformCallback)
    {
        return new TreeNode
        {
            Id = warehouse.Id,
            NodeType = TreeNodeType.Warehouse,
            DisplayName = $"üè¢ {warehouse.Name}",
            Data = warehouse,
            CanEdit = true,
            CanDelete = true,
            CanCreatePicket = true,
            CanCreatePlatform = true,
            EditCallback = editCallback,
            DeleteCallback = deleteCallback,
            CreatePicketCallback = createPicketCallback,
            CreatePlatformCallback = createPlatformCallback
        };
    }



    private static TreeNode CreatePicketNode(
        Picket picket,
        Func<TreeNode, Task<bool>> editCallback,
        Func<TreeNode, Task<bool>> deleteCallback)
    {
        return new TreeNode
        {
            Id = picket.Id,
            ParentId = 0,
            NodeType = TreeNodeType.Picket,
            DisplayName = $"üìç {picket.Name}",
            CanEdit = true,
            CanDelete = true,
            EditCallback = editCallback,
            DeleteCallback = deleteCallback,
            Data = picket
        };
    }

    private static TreeNode CreatePlatformNodeFromTree(
        PlatformTreeDTO platformDto,
        int warehouseId,
        Func<TreeNode, Task<bool>> editCallback,
        Func<TreeNode, Task<bool>> deleteCallback,
        Func<int, Task<bool>> addCargoCallback)
    {
        var platformNode = new TreeNode
        {
            Id = platformDto.Id,
            ParentId = warehouseId,
            NodeType = TreeNodeType.Platform,
            DisplayName = $"üì¶ {platformDto.Name}",
            CanAddCargo = true,
            CanEdit = true,
            CanDelete = true,
            AddCargoCallback = addCargoCallback,
            EditCallback = editCallback,
            DeleteCallback = deleteCallback,
            Data = new Platform 
            { 
                Id = platformDto.Id, 
                Name = platformDto.Name,
                WarehouseId = warehouseId
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
        platformNode.CargoInfo = $"{platformDto.CargoAmount} —Ç. ({platformDto.CargoType})";
        platformNode.CargoType = platformDto.CargoType;
        platformNode.CargoAmount = platformDto.CargoAmount;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫–µ—Ç—ã –∏–∑ DTO
        foreach (var picketDto in platformDto.Pickets)
        {
            var picketNode = new TreeNode
            {
                Id = picketDto.Id,
                ParentId = platformDto.Id,
                NodeType = TreeNodeType.Picket,
                DisplayName = $"üìç {picketDto.Name}",
                CanEdit = true,
                CanDelete = true,
                EditCallback = editCallback,
                DeleteCallback = deleteCallback,
                Data = new Picket { Id = picketDto.Id, Name = picketDto.Name }
            };
            platformNode.Children.Add(picketNode);
        }

        return platformNode;
    }
}
