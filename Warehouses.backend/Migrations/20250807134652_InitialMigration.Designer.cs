// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Warehouses.backend.Data;

#nullable disable

namespace Warehouses.backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250807134652_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Warehouses.backend.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CargoTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("cargo_type_id");

                    b.Property<decimal>("Coming")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("coming");

                    b.Property<decimal>("Consumption")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("consumption");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("platform_id");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorded_at");

                    b.Property<decimal>("Remainder")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("remainder");

                    b.HasKey("Id");

                    b.HasIndex("CargoTypeId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("RecordedAt");

                    b.ToTable("Cargoes");
                });

            modelBuilder.Entity("Warehouses.backend.Models.CargoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CargoTypes");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Picket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Pickets");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("CreatedAt", "ClosedAt");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Warehouses.backend.Models.PlatformPicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<int>("PicketId")
                        .HasColumnType("integer")
                        .HasColumnName("picket_id");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("platform_id");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unassigned_at");

                    b.HasKey("Id");

                    b.HasIndex("PicketId");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformPickets");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Cargo", b =>
                {
                    b.HasOne("Warehouses.backend.Models.CargoType", "CargoType")
                        .WithMany()
                        .HasForeignKey("CargoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouses.backend.Models.Platform", "Platform")
                        .WithMany("Goods")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CargoType");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Picket", b =>
                {
                    b.HasOne("Warehouses.backend.Models.Warehouse", "Warehouse")
                        .WithMany("Pickets")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Platform", b =>
                {
                    b.HasOne("Warehouses.backend.Models.Warehouse", "Warehouse")
                        .WithMany("Platforms")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Warehouses.backend.Models.PlatformPicket", b =>
                {
                    b.HasOne("Warehouses.backend.Models.Picket", "Picket")
                        .WithMany("PlatformPickets")
                        .HasForeignKey("PicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouses.backend.Models.Platform", "Platform")
                        .WithMany("PlatformPickets")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picket");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Picket", b =>
                {
                    b.Navigation("PlatformPickets");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Platform", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("PlatformPickets");
                });

            modelBuilder.Entity("Warehouses.backend.Models.Warehouse", b =>
                {
                    b.Navigation("Pickets");

                    b.Navigation("Platforms");
                });
#pragma warning restore 612, 618
        }
    }
}
